
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package net.thirdlife.iterrpg.init;

import net.thirdlife.iterrpg.IterRpgMod;

import net.minecraftforge.registries.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.event.BuildCreativeModeTabContentsEvent;

import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.CreativeModeTabs;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.network.chat.Component;
import net.minecraft.core.registries.Registries;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
public class IterRpgModTabs {
	public static final DeferredRegister<CreativeModeTab> REGISTRY = DeferredRegister.create(Registries.CREATIVE_MODE_TAB, IterRpgMod.MOD_ID);
	public static final RegistryObject<CreativeModeTab> ITER_MAGIC = REGISTRY.register("iter_magic",
			() -> CreativeModeTab.builder().title(Component.translatable("item_group.iter_rpg.iter_magic")).icon(() -> new ItemStack(ItemRegistry.SPELL_ETHERBOLT.get())).displayItems((parameters, tabData) -> {
				tabData.accept(BlockRegistry.ARCANIST_TABLE.get().asItem());
				tabData.accept(ItemRegistry.GIST.get());
				tabData.accept(ItemRegistry.SPELL_BOOK.get());
				tabData.accept(ItemRegistry.AMETHYST_WAND.get());
				tabData.accept(ItemRegistry.UNIDENTIFIED_SPELL.get());
				tabData.accept(ItemRegistry.SPELL_ETHERBOLT.get());
				tabData.accept(ItemRegistry.SPELL_ETHERBLAST.get());
				tabData.accept(ItemRegistry.SPELL_CULTIVATE.get());
				tabData.accept(ItemRegistry.SPELL_SPLASHES.get());
				tabData.accept(ItemRegistry.SPELL_GUST.get());
				tabData.accept(ItemRegistry.SPELL_IGNITE.get());
				tabData.accept(ItemRegistry.SPELL_EMBERS.get());
				tabData.accept(ItemRegistry.SPELL_ATTRACT.get());
				tabData.accept(ItemRegistry.SPELL_HEAL.get());
				tabData.accept(ItemRegistry.SPELL_DROPLETS.get());
				tabData.accept(ItemRegistry.SPELL_ZAP.get());
			})

					.build());

	@SubscribeEvent
	public static void buildTabContentsVanilla(BuildCreativeModeTabContentsEvent tabData) {
		if (tabData.getTabKey() == CreativeModeTabs.BUILDING_BLOCKS) {
			tabData.accept(BlockRegistry.AMETRINE_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.AMETRINE_BRICKS.get().asItem());
			tabData.accept(BlockRegistry.ABYSSQUARTZ_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.POLISHED_GRIMSTONE.get().asItem());
			tabData.accept(BlockRegistry.GRIMSTONE_BRICKS.get().asItem());
			tabData.accept(BlockRegistry.CRACKED_GRIMSTONE_BRICKS.get().asItem());
			tabData.accept(BlockRegistry.CHISELED_GRIMSTONE_BRICKS.get().asItem());
			tabData.accept(BlockRegistry.POLISHED_GRIMSTONE_STAIRS.get().asItem());
			tabData.accept(BlockRegistry.GRIMSTONE_BRICKS_STAIRS.get().asItem());
			tabData.accept(BlockRegistry.GRIMSTONE_SLAB.get().asItem());
			tabData.accept(BlockRegistry.POLISHED_GRIMSTONE_SLAB.get().asItem());
			tabData.accept(BlockRegistry.GRIMSTONE_BRICKS_SLAB.get().asItem());
			tabData.accept(BlockRegistry.POLISHED_GRIMSTONE_WALL.get().asItem());
			tabData.accept(BlockRegistry.GRIMSTONE_BRICKS_WALL.get().asItem());
			tabData.accept(BlockRegistry.CHARGED_GRIMSTONE_BRICKS.get().asItem());
			tabData.accept(BlockRegistry.GRIM_KEYHOLE.get().asItem());
			tabData.accept(BlockRegistry.RUNIC_GRIMSTONE.get().asItem());
			tabData.accept(BlockRegistry.GRIM_SOULTRAP.get().asItem());
			tabData.accept(BlockRegistry.BARRIER_PROJECTOR.get().asItem());
			tabData.accept(BlockRegistry.SPIRE_SPAWNER.get().asItem());
			tabData.accept(BlockRegistry.GRAND_SPIRE_SPAWNER.get().asItem());
			tabData.accept(BlockRegistry.GIANT_CHAIN.get().asItem());
			tabData.accept(BlockRegistry.SMALL_VASE.get().asItem());
			tabData.accept(BlockRegistry.VASE.get().asItem());
			tabData.accept(BlockRegistry.BIG_VASE.get().asItem());
			tabData.accept(BlockRegistry.SMALL_VASE_DECO.get().asItem());
			tabData.accept(BlockRegistry.VASE_DECO.get().asItem());
			tabData.accept(BlockRegistry.BIG_VASE_DECO.get().asItem());
			tabData.accept(BlockRegistry.SPIDER_SILK_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.MAGMANUM_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.CUT_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.CRACKED_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.CRUMBLING_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.RUNIC_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.SILKY_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.WEAVED_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.INFESTED_HIVESTONE.get().asItem());
			tabData.accept(BlockRegistry.HIVESTONE_SLAB.get().asItem());
			tabData.accept(BlockRegistry.HIVESTONE_STAIRS.get().asItem());
			tabData.accept(BlockRegistry.HIVESTONE_WALL.get().asItem());
			tabData.accept(BlockRegistry.GUNPOWDER_BARREL.get().asItem());
			tabData.accept(BlockRegistry.GOBSTEEL_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.PEARL_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.SACRED_LOG.get().asItem());
			tabData.accept(BlockRegistry.SACRED_WOOD.get().asItem());
			tabData.accept(BlockRegistry.SACRED_LEAVES.get().asItem());
			tabData.accept(BlockRegistry.SACRED_PLANKS.get().asItem());
			tabData.accept(BlockRegistry.SACRED_STAIRS.get().asItem());
			tabData.accept(BlockRegistry.SACRED_SLAB.get().asItem());
			tabData.accept(BlockRegistry.SACRED_FENCE.get().asItem());
			tabData.accept(BlockRegistry.COIN_PILE.get().asItem());
			tabData.accept(BlockRegistry.COIN_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.EARTH_SEAL.get().asItem());
			tabData.accept(BlockRegistry.WATER_SEAL.get().asItem());
			tabData.accept(BlockRegistry.AIR_SEAL.get().asItem());
			tabData.accept(BlockRegistry.FIRE_SEAL.get().asItem());
			tabData.accept(BlockRegistry.VOID_SEAL.get().asItem());
			tabData.accept(BlockRegistry.GRIMACE_TRAP.get().asItem());
			tabData.accept(BlockRegistry.STRIPPED_SACRED_LOG.get().asItem());
			tabData.accept(BlockRegistry.TOMBSTONE.get().asItem());
			tabData.accept(BlockRegistry.GRAVE_CROSS.get().asItem());
		} else if (tabData.getTabKey() == CreativeModeTabs.REDSTONE_BLOCKS) {
			tabData.accept(BlockRegistry.DRILL.get().asItem());
			tabData.accept(BlockRegistry.SACRED_DOOR.get().asItem());
			tabData.accept(BlockRegistry.SACRED_FENCE_GATE.get().asItem());
			tabData.accept(BlockRegistry.SACRED_TRAPDOOR.get().asItem());
			tabData.accept(BlockRegistry.SACRED_PRESSURE_PLATE.get().asItem());
			tabData.accept(BlockRegistry.SACRED_BUTTON.get().asItem());
		} else if (tabData.getTabKey() == CreativeModeTabs.FUNCTIONAL_BLOCKS) {
			tabData.accept(BlockRegistry.GRIM_LOCKER.get().asItem());
			tabData.accept(BlockRegistry.VOID_MAW.get().asItem());
		} else if (tabData.getTabKey() == CreativeModeTabs.COMBAT) {
			tabData.accept(ItemRegistry.WODDEN_DAGGER.get());
			tabData.accept(ItemRegistry.STONE_DAGGER.get());
			tabData.accept(ItemRegistry.IRON_DAGGER.get());
			tabData.accept(ItemRegistry.GOLDEN_DAGGER.get());
			tabData.accept(ItemRegistry.DIAMOND_DAGGER.get());
			tabData.accept(ItemRegistry.NETHERITE_DAGGER.get());
			tabData.accept(ItemRegistry.WOODEN_SPEAR.get());
			tabData.accept(ItemRegistry.STONE_SPEAR.get());
			tabData.accept(ItemRegistry.IRON_SPEAR.get());
			tabData.accept(ItemRegistry.GOLDEN_SPEAR.get());
			tabData.accept(ItemRegistry.DIAMOND_SPEAR.get());
			tabData.accept(ItemRegistry.NETHERITE_SPEAR.get());
			tabData.accept(ItemRegistry.WOODEN_SCYTHE.get());
			tabData.accept(ItemRegistry.STONE_SCYTHE.get());
			tabData.accept(ItemRegistry.IRON_SCYTHE.get());
			tabData.accept(ItemRegistry.GOLDEN_SCYTHE.get());
			tabData.accept(ItemRegistry.DIAMOND_SCYTHE.get());
			tabData.accept(ItemRegistry.NETHERITE_SCYTHE.get());
			tabData.accept(ItemRegistry.WOODEN_FLAIL.get());
			tabData.accept(ItemRegistry.STONE_FLAIL.get());
			tabData.accept(ItemRegistry.IRON_FLAIL.get());
			tabData.accept(ItemRegistry.GOLDEN_FLAIL.get());
			tabData.accept(ItemRegistry.DIAMOND_FLAIL.get());
			tabData.accept(ItemRegistry.NETHERITE_FLAIL.get());
			tabData.accept(ItemRegistry.AMETRINE_SWORD.get());
			tabData.accept(ItemRegistry.AMETRINE_DAGGER.get());
			tabData.accept(ItemRegistry.AMETRINE_SPEAR.get());
			tabData.accept(ItemRegistry.AMETRINE_SCYTHE.get());
			tabData.accept(ItemRegistry.AMETRINE_FLAIL.get());
			tabData.accept(ItemRegistry.HUMIE_BUTCHER.get());
			tabData.accept(ItemRegistry.STINGER.get());
			tabData.accept(ItemRegistry.GOBSTEEL_JAVELIN.get());
			tabData.accept(ItemRegistry.BONB.get());
			tabData.accept(ItemRegistry.VERY_GOOD_AND_CHEERFUL_RAPIER.get());
			tabData.accept(ItemRegistry.CALTROP.get());
			tabData.accept(ItemRegistry.DEEPSTEEL_SWORD.get());
			tabData.accept(ItemRegistry.MAGMANUM_SWORD.get());
			tabData.accept(ItemRegistry.BLOODTHIRST.get());
			tabData.accept(ItemRegistry.BLOODBRANCH.get());
			tabData.accept(ItemRegistry.MARROW.get());
			tabData.accept(ItemRegistry.ELEMENTAL_SWORD.get());
			tabData.accept(ItemRegistry.TORMENTOR.get());
			tabData.accept(ItemRegistry.CRESCENT.get());
			tabData.accept(ItemRegistry.SACRIFICIAL_DAGGER.get());
			tabData.accept(ItemRegistry.DRIFTBOW.get());
			tabData.accept(ItemRegistry.HARVEST.get());
			tabData.accept(ItemRegistry.ETERNAL_TORRENT.get());
			tabData.accept(ItemRegistry.STORMCALLER.get());
			tabData.accept(ItemRegistry.SOLSTICE.get());
			tabData.accept(ItemRegistry.STARLESSNESS.get());
			tabData.accept(ItemRegistry.RAGGED_HELMET.get());
			tabData.accept(ItemRegistry.RAGGED_CHESTPLATE.get());
			tabData.accept(ItemRegistry.RAGGED_LEGGINGS.get());
			tabData.accept(ItemRegistry.RAGGED_BOOTS.get());
			tabData.accept(ItemRegistry.AMETRINE_HELMET.get());
			tabData.accept(ItemRegistry.AMETRINE_CHESTPLATE.get());
			tabData.accept(ItemRegistry.AMETRINE_LEGGINGS.get());
			tabData.accept(ItemRegistry.AMETRINE_BOOTS.get());
			tabData.accept(ItemRegistry.MAGMANUM_ARMOR_HELMET.get());
			tabData.accept(ItemRegistry.MAGMANUM_ARMOR_CHESTPLATE.get());
			tabData.accept(ItemRegistry.MAGMANUM_ARMOR_LEGGINGS.get());
			tabData.accept(ItemRegistry.MAGMANUM_ARMOR_BOOTS.get());
			tabData.accept(ItemRegistry.ELEMENTAL_ARMOR_HELMET.get());
			tabData.accept(ItemRegistry.ELEMENTAL_ARMOR_CHESTPLATE.get());
			tabData.accept(ItemRegistry.ELEMENTAL_ARMOR_LEGGINGS.get());
			tabData.accept(ItemRegistry.ELEMENTAL_ARMOR_BOOTS.get());
			tabData.accept(ItemRegistry.AMETRINE_PENDANT.get());
			tabData.accept(ItemRegistry.ABYSSQUARTZ_CAPACITATOR.get());
		} else if (tabData.getTabKey() == CreativeModeTabs.SPAWN_EGGS) {
			tabData.accept(BlockRegistry.GOBLIN_SPAWNER.get().asItem());
			tabData.accept(ItemRegistry.GOBLIN_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.GOBLIN_WARRIOR_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.HOBGOBLIN_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.SCALLOP_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.GIANT_SPIDER_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.SPIDERLING_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.PEEPER_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.MUDKIN_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.GRIEVER_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.MOURNSTONE_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.WEEPER_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.SORROWSEALED_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.EARTH_ELEMENTAL_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.WATER_ELEMENTAL_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.AIR_ELEMENTAL_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.FIRE_ELEMENTAL_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.VOID_ELEMENTAL_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.BLOATED_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.INSATIABLE_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.SCAB_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.FIEND_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.REVENANT_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.CARCASS_SPAWN_EGG.get());
			tabData.accept(ItemRegistry.SMALL_SCALLOP_SPAWN_EGG.get());
		} else if (tabData.getTabKey() == CreativeModeTabs.INGREDIENTS) {
			tabData.accept(BlockRegistry.ARCANE_FLOWER_SEEDS.get().asItem());
			tabData.accept(ItemRegistry.ABYSSQUARTZ_SHARD.get());
			tabData.accept(ItemRegistry.AMETRINE_INGOT.get());
			tabData.accept(ItemRegistry.AMETRINE_NUGGET.get());
			tabData.accept(ItemRegistry.ETHER_DUST.get());
			tabData.accept(ItemRegistry.COIN.get());
			tabData.accept(ItemRegistry.SPAWNER_FRAGMENT.get());
			tabData.accept(ItemRegistry.MUG.get());
			tabData.accept(ItemRegistry.POTSHERD.get());
			tabData.accept(ItemRegistry.GOBSTEEL_SCRAP.get());
			tabData.accept(ItemRegistry.SEASHELL.get());
			tabData.accept(ItemRegistry.STARFISH.get());
			tabData.accept(ItemRegistry.PEARL.get());
			tabData.accept(ItemRegistry.SPIDER_SILK.get());
			tabData.accept(ItemRegistry.MAGMANUM_CHUNK.get());
			tabData.accept(ItemRegistry.PROFANE_FLESH.get());
			tabData.accept(ItemRegistry.DEMONBONE.get());
			tabData.accept(ItemRegistry.STONE_GEODE.get());
			tabData.accept(ItemRegistry.DEEPSLATE_GEODE.get());
			tabData.accept(ItemRegistry.NETHERRACK_GEODE.get());
			tabData.accept(ItemRegistry.BLACKSTONE_GEODE.get());
			tabData.accept(ItemRegistry.ENDSTONE_GEODE.get());
			tabData.accept(ItemRegistry.BOTTLE_OF_OBSIDIAN_TEARS.get());
			tabData.accept(ItemRegistry.EMPTY_RUNE.get());
			tabData.accept(ItemRegistry.EARTH_RUNE.get());
			tabData.accept(ItemRegistry.EARTH_INGOT.get());
			tabData.accept(ItemRegistry.EARTH_FRAGMENT.get());
			tabData.accept(ItemRegistry.WATER_RUNE.get());
			tabData.accept(ItemRegistry.WATER_INGOT.get());
			tabData.accept(ItemRegistry.WATER_FRAGMENT.get());
			tabData.accept(ItemRegistry.AIR_RUNE.get());
			tabData.accept(ItemRegistry.AIR_INGOT.get());
			tabData.accept(ItemRegistry.AIR_FRAGMENT.get());
			tabData.accept(ItemRegistry.FIRE_RUNE.get());
			tabData.accept(ItemRegistry.FIRE_INGOT.get());
			tabData.accept(ItemRegistry.FIRE_FRAGMENT.get());
			tabData.accept(ItemRegistry.VOID_RUNE.get());
			tabData.accept(ItemRegistry.VOID_INGOT.get());
			tabData.accept(ItemRegistry.VOID_FRAGMENT.get());
			tabData.accept(ItemRegistry.ELEMENTAL_UPGRADE.get());
			tabData.accept(ItemRegistry.ELEMENTAL_INGOT.get());
			tabData.accept(ItemRegistry.ELEMENTAL_FRAGMENT.get());
			tabData.accept(ItemRegistry.HOLLOW_VISAGE.get());
			tabData.accept(ItemRegistry.CRYSTAL_TEAR.get());
			tabData.accept(ItemRegistry.SACRED_TWIG.get());
			tabData.accept(ItemRegistry.ESSENCE_OF_CREATION.get());
			tabData.accept(ItemRegistry.VILE_TISSUE.get());
			tabData.accept(ItemRegistry.DEMONBONE_FRAGMENTS.get());
			tabData.accept(ItemRegistry.DEEPSTEEL_INGOT.get());
			tabData.accept(ItemRegistry.ABSTRUSE_CLOTH.get());
			tabData.accept(ItemRegistry.TOMBSTONE_FRAGMENT.get());
			tabData.accept(ItemRegistry.HAUNTED_SPLINTER.get());
			tabData.accept(ItemRegistry.ECTOPLASM.get());
			tabData.accept(ItemRegistry.OTHERWORDLY_INGOT.get());
		} else if (tabData.getTabKey() == CreativeModeTabs.NATURAL_BLOCKS) {
			tabData.accept(BlockRegistry.ETHERBLOOM.get().asItem());
			tabData.accept(BlockRegistry.ABYSS_QUARTZ.get().asItem());
			tabData.accept(BlockRegistry.SPIDER_EGG.get().asItem());
			tabData.accept(BlockRegistry.GRIMSTONE.get().asItem());
			tabData.accept(BlockRegistry.MAGMANUM_ORE.get().asItem());
			tabData.accept(BlockRegistry.PROFANE_FLESH_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.TENDONS_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.DEMONBONES.get().asItem());
			tabData.accept(BlockRegistry.GEODITE.get().asItem());
			tabData.accept(BlockRegistry.DEEPSLATE_GEODITE.get().asItem());
			tabData.accept(BlockRegistry.NETHERRACK_GEODITE.get().asItem());
			tabData.accept(BlockRegistry.BLACKSTONE_GEODITE.get().asItem());
			tabData.accept(BlockRegistry.ENDSTONE_GEODITE.get().asItem());
			tabData.accept(BlockRegistry.TWIFFLE_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.TWIFFLE.get().asItem());
			tabData.accept(BlockRegistry.WITCHMUD.get().asItem());
			tabData.accept(BlockRegistry.CATTAIL.get().asItem());
			tabData.accept(BlockRegistry.CLOUD_BLOCK.get().asItem());
			tabData.accept(BlockRegistry.SACRED_SAPLING.get().asItem());
			tabData.accept(BlockRegistry.MONOLITH_STONE.get().asItem());
			tabData.accept(BlockRegistry.MONOLITH_STAIRS.get().asItem());
			tabData.accept(BlockRegistry.MONOLITH_SLAB.get().asItem());
			tabData.accept(BlockRegistry.MONOLITH_WALL.get().asItem());
			tabData.accept(BlockRegistry.TEAR_CATCHER.get().asItem());
			tabData.accept(BlockRegistry.HALFLOWER.get().asItem());
		} else if (tabData.getTabKey() == CreativeModeTabs.FOOD_AND_DRINKS) {
			tabData.accept(ItemRegistry.ETHERBLOOM_DECOCTION.get());
			tabData.accept(ItemRegistry.TWIFFLE_LUMP.get());
			tabData.accept(ItemRegistry.BEER_MUG.get());
			tabData.accept(ItemRegistry.SPIDER_MEAD_MUG.get());
			tabData.accept(ItemRegistry.WARPED_GOO.get());
		} else if (tabData.getTabKey() == CreativeModeTabs.TOOLS_AND_UTILITIES) {
			tabData.accept(ItemRegistry.AMETRINE_PICKAXE.get());
			tabData.accept(ItemRegistry.AMETRINE_AXE.get());
			tabData.accept(ItemRegistry.AMETRINE_SHOVEL.get());
			tabData.accept(ItemRegistry.AMETRINE_HOE.get());
			tabData.accept(ItemRegistry.MAGMANUM_PICKAXE.get());
			tabData.accept(ItemRegistry.DEEPSTEEL_PICKAXE.get());
			tabData.accept(ItemRegistry.COIN_POUCH.get());
		}
	}
}
